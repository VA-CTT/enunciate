[#ftl]
[#--

    Copyright Â© 2006-2016 Web Cohesion (info@webcohesion.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--]
[#--template for the client-side complex type.--]
[#macro writeComplexType type]
  [#-- @ftlvariable name="type" type="com.webcohesion.enunciate.modules.jackson.model.TypeDefinition" --]
  [#list moduleFor(type)?split("::") as submodule]

module ${submodule}
  [/#list]

  [#if type.javaDoc??]
  # ${((type.javaDoc.toString())!"(no documentation provided)")?replace("\n", "\n  # ")}
  [#else]
  # (no documentation provided)
  [/#if]
  class ${simpleNameFor(type)} [#if !type.baseObject]< ${classnameFor(type.superclass)} [/#if]

  [#if type.value??]
    [#if !isFacetExcluded(type.value)]
    # ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n    # ")}
    attr_accessor :${type.value.clientSimpleName}
    [/#if]
  [#else]
    [#list type.members as member]
      [#if !isFacetExcluded(member)]
    # ${(member.javaDoc.return!member.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n    # ")}
    attr_accessor :${member.clientSimpleName}
      [/#if]
    [/#list]
  [/#if]

    # the json hash for this ${simpleNameFor(type)}
    def to_jaxb_json_hash
      _h = [#if type.baseObject]{}[#else]super[/#if]
  [#if type.value??]
    [#if !isFacetExcluded(type.value)]
      _h['_value'] = ${type.value.clientSimpleName}.to_jaxb_json_hash unless ${type.value.clientSimpleName}.nil?
    [/#if]
  [#else]
    [#list type.members as member]
      [#if !isFacetExcluded(member)]
        [#if member.collectionType]
      if !${member.clientSimpleName}.nil?
        _ha = Array.new
        ${member.clientSimpleName}.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['${member.name}'] = _ha
      end
        [#else]
      _h['${member.name}'] = ${member.clientSimpleName}.to_jaxb_json_hash unless ${member.clientSimpleName}.nil?
        [/#if]
      [/#if]
    [/#list]
  [/#if]
      return _h
    end
  [#if type.baseObject]

    # the json (string form) for this ${simpleNameFor(type)}
    def to_json
      to_jaxb_json_hash.to_json
    end
  [/#if]

    #initializes this ${simpleNameFor(type)} with a json hash
    def init_jaxb_json_hash(_o)
  [#if !type.baseObject]
      super _o
  [/#if]
  [#if type.value??]
    [#if !isFacetExcluded(type.value)]
      @${type.value.clientSimpleName} = ${classnameFor(type.value)}.from_json(_o['_value']) unless _o['_value'].nil?
    [/#if]
  [#else]
    [#list type.members as member]
      [#if !isFacetExcluded(member)]
        if !_o['${member.name}'].nil?
          _oa = _o['${member.name}']
            if(_oa.is_a? Hash)
              @${member.clientSimpleName} = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @${member.clientSimpleName} =  [#if (member.collectionItemType)??]${classnameFor(member.collectionItemType)}[#else]${classnameFor(member)}[/#if].from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @${member.clientSimpleName} = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @${member.clientSimpleName}.push [#if (member.collectionItemType)??]${classnameFor(member.collectionItemType)}[#else]${classnameFor(member)}[/#if].from_json(_item)
                 else
                   @${member.clientSimpleName}.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @${member.clientSimpleName} = _oa
            end
          end
      [/#if]
    [/#list]
  [/#if]
    end

    # constructs a ${simpleNameFor(type)} from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end
  [#list moduleFor(type)?split("::") as submodule]

end
  [/#list]
[/#macro]